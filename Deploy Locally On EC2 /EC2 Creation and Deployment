‚úÖ Before Deploying the Project on Kubernetes (K8s)
Before deploying the project on Kubernetes (K8s), I initially deployed it on an EC2 instance for local testing of the application.

üöÄ Steps to Create an EC2 Instance:
1. Log in to AWS using an IAM user.
2. Navigate to the EC2 service on the AWS Console and click on "Launch Instance."
3. Configure the instance:
* Set the Instance Name       - Ecommerce-project
* Choose the Operating System ‚Äì I chose Ubuntu
* Select the Instance Type    ‚Äì I chose t2.large, which has 2 vCPUs and 8 GB RAM
4. Create a key pair for remote login:
* AWS generates a private key (.pem) file, which is downloaded to your local machine.
  The public key is stored on the EC2 instance by AWS.
  Secure the .pem file:
  Since this is a sensitive file, only you should have access to it. I changed its permission to 400 using:
  chmod 400 your-key.pem
  4 = read (user)
  0 = no permissions (group)
  0 = no permissions (others)
5. Allow SSH access under Network Settings (enable port 22).
6. Click on "Launch Instance".

üß™ Steps to Run the Application:
1. Login to the instance using ssh -i "path of identity file(.pem) ubuntu@publicip
2. After that check if git already exists else install git using sudo apt install git then clone the github repo using git clone "reponame"
3. Since I wanted to test all microservices together with their dependencies, I used Docker Compose instead of running each service individually with Docker commands.
4.I cloned the GitHub repository onto the EC2 instance.
Before that, I had already:
* Created Dockerfiles for each service.
* Built the Docker images.
* Pushed the images to Docker Hub.
5. Install dockerengine on ubuntu following the docker userguide from official documentation https://docs.docker.com/engine/install/ubuntu/
6. Add it to Apt pacakge to get it updated from linux repositories
7. Docker daemon always runs with root previlage as the ubuntu user is not in docker group 
8. Add user to the dockergroup using below command:
   sudo usermod -aG docker ubuntu (usermod- modify user , -a meaning append to other groups, G - group , groupname and username)
9. Restart the docker/ login again for the changes 
10. I navigated to the relevant folder where docker files are and ran the following command to run all the microservices as containers
   docker compose up -d (to run in background else shows all steps and metrics of creation)

‚úÖ Issues Faced: EC2 ran into a no space issue.
1. Increased the storage of the EBS volume attached to the instance from 8 GB to 30 GB using AWS.
2. Checked the disk storage using df -h and block devices using lsblk.
3. Installed cloud-utils for resizing the partition and file system.
4. Checked which partition is mounted on the root (/).
5. Increased the partition size and then the file system size as described below:

Now, as the containers were running, when I accessed the site using the localhost IP address and port number,
it said ‚ÄúSite can‚Äôt be reached‚Äù because the security group of the host did not have an inbound rule allowing 
HTTP traffic. So, I changed the inbound rule to allow all traffic from anywhere since it is a website meant to be 
accessible by everyone. After that, it worked.


