üì¶ Containerized Product Catalog Service (Go)
This microservice, written in Go, was containerized using a multi-stage Docker build approach to produce a lightweight and production-ready Docker image.

üõ†Ô∏è Multi-Stage Docker Build Approach
I followed a two-stage build process ‚Äî build and release ‚Äî to ensure that the final image contains only the necessary binaries and runtime files.

üî® Build Stage
* Pulled the official golang:alpine base image from Docker Hub.
* Set the WORKDIR to /usr/src/app for structured and consistent builds in container.
* Copied the source code from current directory into the container workdirectory
* Downloaded Go dependencies using go mod download.
* Compiled the Go source into a binary using go build specify buildname and source code in current directory ./

üöÄ Release Stage
* Started from a minimal alpine base image for reduced image size.
* Copied only the built binary from the build stage (using --from=builder).
* Included the required JSON data (/products) for runtime use and set environmental variable i.e,container port 
* Set the container's ENTRYPOINT to execute the built binary so image has only binary and json file and as well the base alpine image

# Dockerfile:

FROM golang:1.22-alpine AS builder
WORKDIR /usr/src/app
COPY . .
RUN go mod download
RUN go build -o product-catalog ./

FROM alpine AS release
WORKDIR /usr/src/app
COPY ./products ./products
COPY --from=builder /usr/src/app/product-catalog ./

ENV PRODUCT_CATALOG_PORT 8080
ENTRYPOINT ["./product-catalog"]


