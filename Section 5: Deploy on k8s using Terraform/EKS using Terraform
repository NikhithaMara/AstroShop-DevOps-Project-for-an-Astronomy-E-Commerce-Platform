üåç Why Terraform?
Using the AWS Console to create infrastructure is fine for just 1 or 2 resources. But what happens when you need to manage dozens or hundreds of resources? It becomes error-prone, inconsistent, and hard to scale.
This is where Infrastructure as Code (IaC) comes in ‚Äî and Terraform is one of the most powerful tools in this space.
Terraform is a cloud-agnostic IaC tool that allows you to define and manage your cloud infrastructure using code. It uses HashiCorp Configuration Language (HCL) to declare resources in a readable, version-controllable way ‚Äî enabling automation, collaboration, and repeatability.

‚öôÔ∏è Terraform Lifecycle Commands
Here‚Äôs a quick overview of the typical Terraform workflow:
* terraform init: Initializes the working directory, downloads the necessary provider plugins (e.g., AWS), sets up the backend (for remote state), and checks for syntax issues.
* terraform plan: A dry run that shows what changes Terraform will make to your infrastructure ‚Äî without actually applying them.(Showing wghat it does when applied)
* terraform apply: creates/updates the resources on cloud provider(AWS) by making api calls with cloud provider.

Behind the scenes, Terraform makes API calls to  cloud provider to provision and manage infrastructure based on your defined configuration.

‚úÖ AWS Authentication
Before Terraformb creates resources on AWS , you need to authenticate with AWS else in which account it creates.
This has been completed by configuring the AWS CLI using access key and secret access key credentials.

üì¶ Terraform State File
Terraform tracks all created infrastructure in a state file. This file acts as a source of truth for the current state of your AWS resources.
When you run terraform apply, Terraform saves the resource metadata in a local file named state file
This file is stored locally by default, meaning it's tied to the user/machine that ran the apply.

If another user modifies the main.tf and runs terraform apply without access to the original state file, Terraform assumes the 
infrastructure doesn‚Äôt exist and may try to recreate it. This can lead to resource duplication or conflicts, especially in a team setting.

‚ö†Ô∏è Why You Shouldn't Share the State File on GitHub
Avoid committing the Terraform state file to GitHub for the following reasons:
It contains sensitive data, such as IP addresses, Resource IDs, Possibly secret values
Storing it in version control poses a security risk.
